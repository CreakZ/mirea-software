#import "../../assets/title_page.typ": *
#import "../../assets/functions.typ": *

#import "@preview/codelst:2.0.1": sourcecode

#set page(margin: 2cm)
#set text(size: 14pt, font: "New Computer Modern")
#set heading(numbering: "1.")

#show heading: it => {align(center, it)}
#show link: underline
#set figure(supplement: [Рисунок])
#set figure.caption(separator: [ -- ])

#title_page_me(
  2,
  [Установка операционных систем семейства Unix в подсистеме Windows для Linux в Windows 10],
)

#outline(
  title: [Оглавление]
)

#set page(numbering: "1")

#set par(first-line-indent: 1.25cm, justify: true)

#pagebreak()

= Введение

#let indent = h(1.25cm)

#indent *Цель работы*: получить навыки по развертыванию операционных
систем Unix на основе Windows Subsystem для Linux в Windows 10.

*Задание*: 

В компонентах Windows 10, а именно Панель управления-Программы и компоненты-Включение или отключение компонентов Windows включить компонент #quote_wrap([Подсистема Windows для Linux]). При необходимости перезагрузиться после установки.

Открыть приложение Windows 10 Microsoft Store (Магазин Windows).
В поиске по магазину набрать Ubuntu и скачать найденный дистрибутив.
При скачивании может появиться предложение войти в аккаунт Microsoft.
Это предложение можно проигнорировать, закрыв окно по входу в аккаунт
Microsoft. Дистрибутив продолжит дальнейшую загрузку.
Запустить загруженный дистрибутив Ubuntu.
  
Для закрепления полученных навыков скачайте и установите еще одну из
следующих
операционных
систем.
Выбор
можно
осуществить
самостоятельно или посоветовавшись с преподавателем.
Свободно распространяемые дистрибутивы операционных систем Unix,
доступные на данный момент (15.02.2021) в Microsoft Store:
-  Ubuntu (можно выбрать версию)
- OpenSUSE
- SUSE Linux ES
- Kali Linux
- CentOS (можно выбрать версию)
- Debian
- Alpine WSL

#indent Приведенные ниже
команды
выполнять
в
обеих
установленных
операционных системах. В случае, если команда не запускается по причине
отсутствия, найти аналог команды для данной операционной системы.

Работа с документацией:

+ Ознакомиться и выполнить команду `man` и опцию `--help` для любой команды
+ Ознакомиться и выполнить команду `whatis`
+ Ознакомиться и выполнить команду `whereis`
+ Ознакомиться и выполнить команды `more` и `less`
+ Ознакомиться и выполнить команды `head` и `tail`
+ Ознакомиться и выполнить команду `grep`
+ Ознакомиться и выполнить команды `sort`
+ Ознакомиться и выполнить команды `wc`
+ Ознакомиться и выполнить команды `diff`
+ Отредактировать текстовый файл с помощью редакторов `nano` и `vi`
+ Ознакомиться и выполнить команду `kill`
+ Ознакомиться и выполнить команду `ps`
+ Ознакомиться и выполнить команды `top` и `htop`. Посмотреть список запущенных процессов в операционной системе.
+ Ознакомиться и выполнить команду `time`
+ Установить приложение используя команду `sudo`
+ Запустить приложение используя команду `sudo`
+ Ознакомиться и выполнить команду `apt-get` (с применением команды `sudo`)
+ Ознакомиться и выполнить команду `date`
+ Ознакомиться и выполнить команду `uname`
+ Ознакомиться и выполнить команду `uptime`
+ Ознакомиться и выполнить команду `sleep`
+ Ознакомиться и выполнить команды `useradd`, `userdel` и `usermod`
+ Ознакомиться и выполнить команду `passwd`
+ Ознакомиться и выполнить команду `ip`
+ Ознакомиться и выполнить команду `ping`
+ Ознакомиться и выполнить команду `nethogs`
+ Ознакомиться и выполнить команду `traceroute`
+ Ознакомиться и выполнить команду `hostname`
+ Ознакомиться и выполнить команду `pwd`.
+ Ознакомиться и выполнить команду `ls`. Добавить параметры для этой команды `-la`. Выполнить эту же команду с параметрами `-l` и `-a` отдельно. Объяснить полученный результат
+ Ознакомиться и выполнить команду `cd`
+ Ознакомиться и выполнить команды `mkdir` и `rmdir`
+ Ознакомиться и выполнить команду `rm`
+ Ознакомиться и выполнить команду `touch`
+ Ознакомиться и выполнить команду `cp`
+ Ознакомиться и выполнить команду `mv37`. Ознакомиться и выполнить команду `locate`
+ Ознакомиться и выполнить команду `cat`
+ Ознакомиться и выполнить команду `df`
+ Ознакомиться и выполнить команду `du`
+ Ознакомиться и выполнить команду `tar`
+ Ознакомиться и выполнить команды `zip` и `unzip`
+ Ознакомиться и выполнить команду `chmod`
+ Ознакомиться и выполнить команду `chown`
+ Ознакомиться и выполнить команду `file`
+ Ознакомиться и выполнить команду `find`
+ Ознакомиться и выполнить команду `clear`
+ Ознакомиться и выполнить команду `halt`
+ Ознакомиться и выполнить команду `reboot`
+ Ознакомиться и выполнить команды `mount` и `umount`

#pagebreak()

= Теоретическое введение

#indent Подсистема Windows для Linux (WSL) — это среда, позволяющая пользователям Windows 10 и более поздних версий запускать полноценную операционную систему семейства Unix (например, Ubuntu, Debian, Fedora и другие) непосредственно в Windows, без необходимости виртуализации или двойной загрузки. WSL предоставляет возможность разработчикам, администраторам и пользователям работать с инструментами и утилитами Linux в привычной Windows-среде.

Исторически операционные системы семейства Unix, такие как Linux, BSD и другие, отличались своим архитектурным подходом к многозадачности, безопасности и управлению ресурсами. Их широкое применение в серверных средах, научных исследованиях и разработке программного обеспечения делает их незаменимым инструментом для многих пользователей. Однако, для пользователей операционной системы Windows, необходимость переключения между системами или использования эмуляторов могла создавать неудобства и ограничивать продуктивность.

С появлением WSL Microsoft предоставила решение, которое интегрирует ядро Linux в Windows. Это позволяет запускать приложения и использовать утилиты Unix-подобных систем на уровне ядра, что обеспечивает высокую производительность и совместимость. Пользователи могут взаимодействовать с WSL через командную строку, запускать скрипты, устанавливать пакеты и даже работать с графическими интерфейсами, используя дополнительные настройки (например, WSL 2).

#pagebreak()

= Выполнение работы

#set par(first-line-indent: 0cm)

== Установка Linux в WSL 2

#indent Поскольку работа, аналогично предыдущей (и наверняка, аналогично последующим), выполняется на операционной системе Fedora Linux 40, то часть работы, посвященная установке дистрибутива Linux на WSL будет пропущена. Поэтому сразу перейдем к работе с консольными командами.

== Работа с документацией

#enum(
  [
    `man [команда]`\
Отображает справочную страницу для указанной команды. Например, `man ls` покажет руководство по команде `ls`. `--help` -- опция, которая выводит краткое описание команды и её опций. Например, `ls --help` отобразит доступные параметры и их использование.
    #figure(
      image(
        "../img/man.png",
         width: 80%,
      ),
      caption: [`man`]
    )
  ],
  [
    `whatis [команда]`\
Отображает краткое описание команды. Например, `whatis man` покажет короткое описание команды `ls`.
    #figure(
      image(
        "../img/whatis.png",
         width: 80%,
      ),
      caption: [`whatis`]
    )
  ],
  [
    `whereis [команда]`\
Показывает местоположение бинарного файла, исходного кода и документации для указанной команды. Например, `whereis go` покажет пути к бинарному файлу, исходному коду и мануалам команды `go`.
    #figure(
      image(
        "../img/whereis.png",
         width: 80%,
      ),
      caption: [`whereis`]
    )
  ]
)

#pagebreak()

== Работа с текстом

#enum(
  [
    `more [файл]`\
    Постраничный просмотр содержимого файла. Например, `more bashrc` позволит просматривать файл `bashrc` постранично. `less` более функциональный просмотрщик файлов, позволяющий перемещаться вверх и вниз по содержимому. Например, `less file.txt` откроет файл `file.txt` с возможностью прокрутки.
    #figure(
      image(
        "../img/more.png",
         width: 80%,
      ),
      caption: [`more`]
    )
  ],
  [
    `head [файл]` \
Отображает первые 10 строк файла по умолчанию. Можно указать количество строк с помощью опции `-n`. Например, `head -n 20 file.txt` покажет первые 20 строк файла `file.txt`. `tail` отображает последние 10 строк файла по умолчанию. Можно указать количество строк с помощью опции `-n`. Например, `tail -n 20 file.txt` покажет последние 20 строк файла `file.txt`.
    #figure(
      image(
        "../img/more.png",
         width: 80%,
      ),
      caption: [`more`]
    )
  ],
  [
    `grep [шаблон] [файл]`\
Поиск строк в файле, содержащих указанный шаблон. Например, `grep "text" file.txt` найдет все строки, содержащие слово `"text"` в файле `file.txt.`
    #figure(
      image(
        "../img/grep.png",
         width: 80%,
      ),
      caption: [`grep`]
    )
  ],
  [
    `sort [файл]`\
Сортирует строки в файле. Например, `sort file.txt` отсортирует строки файла `file.txt` в алфавитном порядке.
  ],
  [
    `wc [файл]`\
Подсчитывает количество строк, слов и символов в файле. Например, `wc file.txt` покажет статистику для файла `file.txt`.
  ],
  [
    `diff [файл1] [файл2]`\
Сравнивает два файла и показывает различия между ними. Например, `diff file1.txt file2.txt` покажет различия между `file1.txt` и `file2.txt`.
  ],
  [
    `nano [файл]` и `vi [файл]`\
`nano` -- простенький текстовый редактор, позволяющий редактировать файлы в командной строке. Например, `nano file.txt` откроет файл `file.txt` для редактирования. `vi` -- мощный текстовый редактор, имеющий множество режимов и команд. `vi file.txt` откроет файл `file.txt` в редакторе `vi`.
  ]
)

#pagebreak()

== Работа с процессами

#enum(
  [
    `kill [PID]`\
Отправляет сигнал процессу с указанным идентификатором (`PID`). Например, `kill 1234` отправит сигнал по умолчанию (`TERM`) процессу с `PID` `1234`.
    #figure(
      image(
        "../img/kill.png",
         width: 80%,
      ),
      caption: [`kill`]
    )
  ],
  [
    `ps`\
Показывает информацию о текущих запущенных процессах. Например, `ps aux` покажет подробный список всех процессов.
    #figure(
      image(
        "../img/ps.png",
         width: 80%,
      ),
      caption: [`ps`]
    )
  ],
  [
    `top`\
Отображает динамический список текущих процессов, отсортированный по использованию ресурсов.
    #figure(
      image(
        "../img/top.png",
         width: 80%,
      ),
      caption: [`top`]
    )
  ],
  [
    `htop`\
Подобен `top`, но с более удобным и настраиваемым интерфейсом. Для использования `htop`, может потребоваться установка через пакетный менеджер.
  ],
  [
    `time [команда]`\
    Измеряет время выполнения указанной команды. Например, time ls покажет, сколько времени потребовалось для выполнения команды ls.
  ]
)

#pagebreak()

== Команды пользователя

#enum(
  [
    `sudo [команда]`\
Выполняет указанную команду с правами суперпользователя. Например, `sudo dnf update` выполнит обновление пакетов с правами администратора.
    #figure(
      image(
        "../img/sudo.png",
         width: 80%,
      ),
      caption: [`sudo`]
    )
  ],
  [
    `sudo [приложение]`\
Запускает приложение с правами суперпользователя. Например, sudo nano /etc/hosts откроет файл /etc/hosts в редакторе nano с правами администратора.
  ],
  [
    `apt-get [опция]`\
Пакетный менеджер для систем на базе Debian. Например, `sudo apt-get install [package]` установит указанный пакет (в дистрибутиве Fedora используется пакетный менеджер `dnf`).
  ],
  [
    `date`\
Показывает текущую дату и время. Например, `date` покажет текущую дату и время в стандартном формате.
    #figure(
      image(
        "../img/date.png",
         width: 80%,
      ),
      caption: [`date`]
    )
  ],
  [
`uname`\
Отображает информацию о системе. Например, `uname -a` покажет полную информацию о системе, включая название ядра и архитектуру.
  ],
  [
    `uptime`\
Показывает время работы системы с последней загрузки. Например, `uptime` покажет, сколько времени система работает, сколько пользователей вошли в систему и текущую нагрузку.
    #figure(
      image(
        "../img/uptime.png",
         width: 80%,
      ),
      caption: [`uptime`]
    )
  ],
  [
    `sleep [время]`\
Приостанавливает выполнение скрипта на указанное количество секунд. Например, `sleep 10` приостановит выполнение на 10 секунд.
  ]
)

#pagebreak()

== Управление пользователями

#enum(
  [
`useradd [параметры] [пользователь]`\
Добавляет нового пользователя в систему. Например, `sudo useradd newuser` создаст нового пользователя `newuser`.
    #figure(
      image(
        "../img/useradd.png",
         width: 80%,
      ),
      caption: [`useradd`]
    )
  ],
  [
    `userdel [пользователь]`\
Удаляет пользователя из системы. Например, `sudo userdel olduser` удалит пользователя `olduser`.
    #figure(
      image(
        "../img/userdel.png",
         width: 80%,
      ),
      caption: [`userdel`]
    )
  ],
  [
    26. `usermod [параметры] [пользователь]`\
Изменяет информацию о пользователе. Например, `sudo usermod -aG sudo user` добавит пользователя user в группу `sudo`.
  ],
  [
    `passwd [пользователь]` \
Изменяет пароль пользователя. Например, `sudo passwd user` изменит пароль для пользователя `user`.
    #figure(
      image(
        "../img/passwd.png",
         width: 80%,
      ),
      caption: [`passwd`]
    )
  ]
)

#pagebreak()

== Работа с сетью

#enum(
  [
    `ip [параметры]`\
Управляет сетевыми интерфейсами и маршрутами. Например, `ip a` покажет информацию о всех сетевых интерфейсах.
    #figure(
      image(
        "../img/ip.png",
         width: 80%,
      ),
      caption: [`ip`]
    )
  ],
  [
    `ping [адрес]`\
Проверяет доступность хоста в сети. Например, `ping google.com` отправит запросы на `google.com` и покажет время отклика.
    #figure(
      image(
        "../img/ping.png",
         width: 80%,
      ),
      caption: [`ping`]
    )
  ],
  [
    `nethogs`\
Отображает сетевую активность по процессам, показывая, какие процессы потребляют сетевые ресурсы.
  ],
  [
    `traceroute [адрес]`\
Показывает путь, который проходят пакеты до указанного хоста. Например, `traceroute google.com` покажет маршрут до `google.com`.
    #figure(
      image(
        "../img/traceroute.png",
         width: 100%,
      ),
      caption: [`traceroute`]
    )
  ],
  [
    `hostname`\
Отображает или устанавливает имя хоста системы. Например, `hostname` покажет текущее имя хоста.
  ]
)


#pagebreak()

== Работа с файлами

#enum(
  [
    `pwd` \
    Показывает полный путь к текущему рабочему каталогу. Например, `pwd` выведет путь, где вы находитесь в файловой системе.
    #figure(
      image(
        "../img/pwd.png",
        width: 80%,
      ),
      caption: [`pwd`]
    )
  ],
  [
    `ls [параметры]` \
    Отображает содержимое каталога. `ls -la` покажет все файлы и каталоги, включая скрытые, с подробной информацией о них. `-l` выводит подробную информацию о файлах. `-a` показывает скрытые файлы.
    #figure(
      image(
        "../img/ls.png",
         width: 100%,
      ),
      caption: [`ls`]
    )
  ],
  [
    `cd [каталог]` \
    Изменяет текущий рабочий каталог. Например, `cd /home/user` перейдет в каталог `/home/user`.
    #figure(
      image(
        "../img/cd.png",
         width: 100%,
      ),
      caption: [`cd`]
    )
  ],
  [
    `mkdir [каталог]` \
    Создает новый каталог. Например, `mkdir newfolder` создаст каталог `newfolder`.
  ],
  [
    `rmdir [каталог]` \
    Удаляет пустой каталог. Например, `rmdir oldfolder` удалит пустой каталог `oldfolder`.
  ],
  [
    `rm [файл]` \
    Удаляет указанный файл. Например, `rm file.txt` удалит файл `file.txt`.
  ],
  [
    `touch [файл]` \
    Создает новый пустой файл или обновляет время последнего доступа указанного файла. Например, `touch newfile.txt` создаст файл `newfile.txt`.
  ],
  [
    `cp [источник] [назначение]` \
    Копирует файлы или каталоги. Например, `cp file1.txt file2.txt` скопирует файл `file1.txt` в `file2.txt`.
  ],
  [
    `mv [источник] [назначение]` \
    Перемещает или переименовывает файлы и каталоги. Например, `mv file1.txt /home/user/` переместит файл `file1.txt` в каталог `/home/user/`.
  ],
  [
    `locate [файл]` \
    Быстро ищет файлы по имени, используя индекс. Например, `locate file.txt` найдет все вхождения `file.txt`.
  ],
  [
    `cat [файл]`\
    Отображает содержимое файла в стандартный вывод. Например, `cat file.txt` выведет содержимое файла `file.txt` на экран. Также можно использовать `cat` для объединения нескольких файлов.
  ],
  [
    `df [параметры]`\
    Показывает использование дискового пространства на файловых системах. Например, `df -h` отобразит информацию о дисковом пространстве в удобном для чтения формате (с размерами в КБ, МБ и ГБ).
  ],
  [
    `du [параметры]`\
    Показывает использование дискового пространства файлами и каталогами. Например, `du -sh /path/to/dir` отобразит общий размер каталога `/path/to/dir` в удобном для чтения формате.
  ],
  [
    `tar [параметры] [файлы]`\
    Создает или распаковывает архивы. Например, `tar -cvf archive.tar file1 file2` создаст архив `archive.tar`, содержащий файлы `file1` и `file2`. Команда `tar -xvf archive.tar` распакует архив `archive.tar`.
  ],
  [
    `zip [параметры] [файлы]`\
    Создает архив в формате ZIP. Например, `zip archive.zip file1 file2` создаст ZIP-архив `archive.zip`, содержащий файлы file1 и file2.
  ],
  [
    `unzip [параметры] [архив]`\
    Распаковывает ZIP-архив. Например, `unzip archive.zip` распакует содержимое архива `archive.zip` в текущий каталог.
  ],
  [
    `chmod [параметры] [файл]` \
Изменяет права доступа к файлу или каталогу. Например, `chmod 755 file.txt` установит права на файл `file.txt` так, что владелец будет иметь полные права, а группа и другие пользователи — только права на чтение и выполнение.
  ],
  [
`chown [параметры] [файл]`\
Изменяет владельца и/или группу для файла или каталога. Например, `chown user:group file.txt` изменит владельца файла `file.txt` на `user` и группу на `group`.
  ],
  [
    `file [файл]`\
Определяет тип файла, основываясь на содержимом. Например, `file file.txt` покажет, что файл `file.txt` является текстовым файлом.
  ],
  [
    `find [путь] [параметры]` \
Ищет файлы и каталоги в указанном пути. Например, `find /home/user -name "\*.txt"` найдет все текстовые файлы в каталоге `/home/user`.
  ]
)

#pagebreak()

== Работа с системой

#enum(
  [
    `clear` \
    Очищает экран терминала. Например, `clear` удалит все предыдущие команды и вывод, предоставив чистое окно терминала.
    #figure(
      image(
        "../img/clear.png",
        width: 100%,
      ),
      caption: [`clear`]
    )
  ],
  [
    `halt` \
    Немедленно завершает работу системы и выключает её. Командой стоит пользоваться с осторожностью, так как ее выполнение приведет к немедленному завершению всех процессов.
    #figure(
      image(
        "../img/halt.jpg",
        width: 80%,
      ),
      caption: [`halt`]
    )
  ],
  [
    `reboot` \
    `reboot` выполнит перезагрузку системы, завершив все процессы и перезапустив операционную систему.
  ],
  [
    `mount [параметры] [устройство] [каталог]`\
    Монтирует файловую систему устройства в указанном каталоге. Например, `mount /dev/sda1 /mnt` смонтирует раздел `/dev/sda1` в каталог `/mnt`.
    #figure(
      image(
        "../img/mount.png",
        width: 100%,
      ),
      caption: [`mount`]
    )
  ],
  [
    `umount [путь]`\
    Отмонтирует файловую систему. Например, `umount /mnt` отмонтирует файловую систему, смонтированную в каталоге `/mnt`.
  ]
)

#pagebreak()

= Выводы

#indent В результате выполнения работы были получены навыки по развертыванию операционных систем Unix на основе Windows Subsystem для Linux в Windows 10, а так же работе с приведенными в задании консольными командами.  
