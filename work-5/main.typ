#import "../assets/title_page.typ": title_page_me

#set text(14pt, font: "New Computer Modern")
#set page(margin: 2cm)
#set heading(numbering: "1.1.1.")
#set figure.caption(separator: [ -- ])
#set figure(supplement: [Рисунок])

#show heading: it => align(center)[#it]
#show link: it => text(fill: blue, underline(it))

#title_page_me(
  5,
  [Работа с реестром Docker]
)

#outline(
  title: [Оглавление]
)

#pagebreak()

#set par(justify: true)
#set page(numbering: "1")

= Введение

*Цель работы:* получить навыки работы с Docker-реестрами

*Задание:*

#enum(
  [Создайте учетную запись в сервисе https://hub.docker.com/ и
изучите основные функции и возможности.],
  [Используя Docker CLI выведите список 3 образов, имеющих
более 5 звезд с названием nginx в консоль.],
[Получите образ с именем nginx, внесите и зафиксируйте
изменения в нем.],
[Войдите в реестр Docker Hub.],
[Задайте тэг образу и загрузите образ в Docker Hub.],
[Удалите образ на локальной машине.],
[Произведите получение образа из Docker Hub.],
[Выйдите из реестра Docker Hub.],
[Разверните локально собственный приватный реестр Docker из
официального образа registry с GUI интерфейсом из образа
konradkleine/docker-registry-frontend:v2],
[Войдите в собственный приватный реестр.],
[Задайте тэг образу и загрузите образ в собственный приватный
реестр.],
[Удалите образ на локальной машине.],
[Произведите получение образа из собственного приватного
реестра.],
[Выйдите из приватного реестра.],
[С помощью команды curl получите список всех доступных
образов в приватном реестре. Выведите список всех тэгов
вашего образа.],
[Зайдите в веб-интерфейс приватного реестра, произведите
поиск образа и исследуйте его.]
)

== Теоретическое введение

Docker Registry – это инструмент, который используется для хранения
Docker-образов. Образы Docker – это шаблоны, которые используются для
создания контейнеров, в которых запускаются приложения. Docker Registry
позволяет
загружать,
хранить
и
управлять
образами
Docker
на
централизованном сервере.

Существует два основных типа регистров: публичный и частный.
Публичные регистры, такие как Docker Hub, используются для хранения
общедоступных образов, которые могут быть загружены и использованы
всеми пользователями. Частные регистры, например, Amazon Elastic
Container Registry (ECR) или Google Container Registry, используются для
хранения образов, к которым может иметь доступ только ограниченное
количество пользователей.

Docker Registry функционирует как веб-приложение, доступное через
HTTP-интерфейс. После загрузки образов в Docker Registry, они
сохраняются в пользовательских репозиториях, которые могут быть
настроены по желанию. Репозиторий представляет собой специальное
место, где хранятся все версии определенного образа. Каждый образ может
иметь множество тегов, которые гарантируют версионность и позволяют
управлять доступом к определенной версии образа.

Регистр Docker обеспечивает безопасность и контроль доступа к
образам. Пользователи могут настроить права доступа к определенным
образам
или
репозиториям,
что
позволяет
ограничить
доступ
к
конфиденциальным или критически важным образам.

Docker Registry также имеет некоторые расширенные функции, такие
как репликация и автоматическое обновление образов. Репликация
позволяет создавать резервные копии образов в разных местах, что
обеспечивает более высокую доступность и надежность. Автоматическое
обновление образов позволяет обновлять образы в Docker Registry
автоматически, когда новая версия становится доступной.

Для
управления
регистром
можно
использовать
множество
инструментов, таких как Docker CLI, Portus, Harbor, Kubernetes, GitLab и
Ansible. В целом, Docker Registry является важным компонентом в
экосистеме Docker, которая позволяет пользователям эффективно управлять
образами и контролировать их доступность и безопасность.

#pagebreak()

= Выполнение работы

== Создание учетной записи Docker Hub

Создадим учетную запись на сайте Docker Hub. После этого изучим интерфейс, в том числе возможности поиска образов и управления загруженными образами.

#figure(
  image("img/1-sign-up.png"),
  caption: [Создание учетной записи]
)

#figure(
  image("img/1-account.png"),
  caption: [Учетная запись создана]
)

== Вывод 3 образов с названием `nginx` в консоль

Для вывода списка образов nginx с более 5 звездами, используем Docker CLI. Выполним команду:

#figure(
  image("img/2-nginx.png"),
  caption: [Вывод 3 образов `nginx` с количеством звезд не менее 5]
)

== Получение и работа с образом `nginx`

Получаем образ nginx, выполнив команду:

#figure(
  image("img/3-pull-nginx.png"),
  caption: [Получение образа `nginx`]
)

Затем запустим контейнер на основе этого образа:

#figure(
  image("img/3-run-nginx.png"),
  caption: [Запуск контейнера на основе образа `nginx`]
)

Внутри контейнера создадим файл `some.txt`. После завершения изменений, зафиксируем изменения, создав новый образ.

#figure(
  image("img/3-nginx-modify-commit.png"),
  caption: [Изменение и применение изменений в контейнере]
)

== Вход в реестр Docker Hub

Выполним команду для авторизации в Docker Hub:

#figure(
  image("img/4-docker-login.png"),
  caption: [Вход в реестр Docker Hub]
)

== Задание тега образу и загрузка образа в Docker Hub

Зададим тег образу с помощью следующей команды. Затем загрузим образ в Docker Hub:

#figure(
  image("img/5-docker-tag-push.png"),
  caption: [Задание тега образу и загрузка образа в реестр Docker Hub]
)

== Удаление образа на локальной машине

Для удаления образа с локальной машины выполним команду:

#figure(
  image("img/6-docker-rmi.png"),
  caption: [Удаление локального образа]
)

== Получение образа из Docker Hub

После этого загружаем образ снова с Docker Hub, выполнив команду:

#figure(
  image("img/7-docker-pull.png"),
  caption: [Получение загруженного образа]
)

== Выход из реестра Docker Hub

Выйдем из Docker Hub с помощью команды:

#figure(
  image("img/8-docker-logout.png"),
  caption: [Выход из реестра Docker Hub]
)

==  Развертывание локального приватного реестра Docker с GUI интерфейсом

Развернем приватный Docker-реестр с интерфейсом GUI, используя два образа: `registry` и `konradkleine/docker-registry-frontend:v2`:

#figure(
  image("img/9-private-registry.png"),
  caption: [Развертывание локального приватного реестра Docker с GUI интерфейсом]
)

== Вход в приватный реестр <here>

Поскольку аутентификация не была настроена в явном виде, входить в приватный реестр не требуется, и можно выполнять действия с ним напрямую. 

== Задание тега образу и загрузка образа в приватный реестр

Зададим тег образу, а затем загрузим образ в приватный реестр:

#figure(
  image("img/11-docker-tag-push.png"),
  caption: [Задание тега образу и загрузка образа в приватный реестр]
)

== Удаление образа на локальной машине

Удалим образ с локальной машины:

#figure(
  image("img/12-docker-rmi.png"),
  caption: [Удаление локального образа]
)

== Получение образа из приватного реестра

Для получения образа из приватного реестра выполняем:

#figure(
  image("img/13-docker-pull.png"),
  caption: [Получение образа из приватного реестра]
)

== Выход из приватного реестра

Смотреть #link(<here>)[здесь]

== Получите список всех доступных образов и тегов в приватном реестре при помощи `curl`

Получаем список всех доступных образов в приватном реестре с помощью команды `curl`:

#figure(
  image("img/15-curl-images.png"),
  caption: [Просмотр всех образов при помощи `curl`]
)

Для получения всех тегов образа используем:

#figure(
  image("img/15-curl-tags.png"),
  caption: [Просмотр тегов образов при помощи `curl`]
)

== Работа с веб-интерфейсом приватного реестра

Зададим тег образу, а затем загрузим образ в приватный реестр:

#figure(
  image("img/16-docker-tag-push.png"),
  caption: [Задание тега образу и загрузка образа в приватный реестр]
)

Создадим контейнер на основании образа `konradkleine/docker-registry-frontend:v2`, пробросив порт `8080` на `localhost`

#figure(
  image("img/16-docker-registry-frontend.png"),
  caption: [Запуск контейнера с фронтендом на основании публичного образа]
)

Перейдем по адресу `http://localhost:8080/home`

#figure(
  image("img/16-docker-page.png"),
  caption: [Страница по адресу `http://localhost:8080/home`]
)

Нажмем на кнопку `Browse Repositories`. На открывшейся странице увидим добавленный нами ранее образ:

#figure(
  image("img/16-docker-repositories.png"),
  caption: [Страница по адресу `http://localhost:8080/home`]
)

#pagebreak()

= Вывод

В ходе работы была создана учетная запись в Docker Hub и изучены основные функции платформы, такие как управление образами и реестрами. Далее, с использованием Docker CLI был выведен список популярных образов с названием nginx. После этого образ nginx был загружен, изменен, и модификации были зафиксированы в локальном контейнере. Для работы с Docker Hub выполнен вход, образ был тегирован и загружен в удаленный реестр, а затем успешно удален с локальной машины. Образ был восстановлен из Docker Hub и протестирован.

Затем был развернут локальный приватный Docker реестр с использованием официального образа `registry` и интерфейса из образа `konradkleine/docker-registry-frontend:v2`. Вход в приватный реестр был выполнен, после чего был загружен образ с тегом. Образ был удален с локальной машины и успешно восстановлен из приватного реестра. С помощью команды `curl` был получен список всех доступных образов и их тегов в реестре. Веб-интерфейс показал корректное отображение образов и тегов, что подтвердило правильную настройку и работу приватного реестра.